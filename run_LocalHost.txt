##################################################
# Chordify - Run Commands
##################################################

#############################################
# Docker Setup Commands

# Create a Docker network for the Chordify application.
docker network create chord-network

# Run the bootstrap node.
docker run --name bootstrap --network chord-network --env-file .env -p 8000:8000 --rm chordify python bootstrap.py

#############################################
# Docker Compose Commands

# Build and run the application using Docker Compose.
sudo docker-compose build
sudo docker-compose up
# Note: If debugging, stop the current process and re-run docker-compose up after changes.

#############################################
# Node Information Sample Output Running on LocalHost, using docker-compose up

# nodes
# bootstrap
# 0
#
# 1420581437667931473358569046990045498294268739854 - song1
#
# node3
# 1153412323553608433409003516544375445689255214539
#
# node2
# 1094592468334682115993406799157015824791113659155
#
# 1060835990263383605338597466665306717774306438481 - song2
#
# 965696929074020543867046079388136486593115301208 - jow
#
# 897157909036590648573699943635484619774617861767 - yolo
#
# node5
# 605907502187820619582591828504881381613563872501
#
# 560530314752634316420197739378665337808593011142 - manos
#
# node4
# 300958178807431293100459636149632972812029243419
#
# node6
# 219554627954620086306823540638194890711608052240
#
# 204098985406021757975430306748131464992338660059 - song3
#
# node1
# 171865491289448819003469989719053766790160449571
#
# 129381022922359489803466488100231636130716702717 - joe

#############################################
# Adding New Nodes

# Start a new node (node5).
sudo docker run -d \
    --network chordify_default \
    --name node5 \
    -v $(pwd):/app \
    -e IP=node5 \
    -e PORT=8005 \
    -p 8005:8005 \
    chordify \
    python app.py --ip node5 --port 8005 --bootstrap_ip bootstrap --bootstrap_port 8000

# Start another new node (node6).
sudo docker run -d \
    --network chordify_default \
    --name node6 \
    -v $(pwd):/app \
    -e IP=node6 \
    -e PORT=8006 \
    -p 8006:8006 \
    chordify \
    python app.py --ip node6 --port 8006 --bootstrap_ip bootstrap --bootstrap_port 8000


#############################################
# Basic API Interactions (Linux/macOS)
#############################################

# Insert a song (key: "song1", value: "node8001")
curl -X POST http://127.0.0.1:8001/insert \
     -H "Content-Type: application/json" \
     -d '{"key": "song1", "value": "node8001"}'

# Update replication settings and consistency mode.
curl -X POST -H "Content-Type: application/json" \
     -d '{"replication_factor": 3, "consistency_mode": "eventual"}' \
     http://127.0.0.1:8000/update_settings

# Query a song by key.
curl -X GET "http://127.0.0.1:8001/query?key=song1"

# Get network overlay.
curl -X GET http://127.0.0.1:8001/overlay

# Depart a node (example on port 8002).
curl -X POST http://localhost:8002/depart

# Note: Extra join operations are not implemented â€“ node joining is handled by starting a new container.

# (Linux/macOS) Query a song.
curl -X GET "http://127.0.0.1:8001/query?key=song1"


#############################################
# Windows PowerShell Commands
#############################################

# Insert a song (key: "song1", value: "Imagine")
Invoke-WebRequest -Uri "http://127.0.0.1:8001/insert" `
  -Method Post `
  -Headers @{ "Content-Type" = "application/json" } `
  -Body '{"key": "song1", "value": "Imagine"}'

# Query a song.
Invoke-WebRequest -Uri "http://127.0.0.1:8001/query?key=song1" -Method Get

# Delete a song.
Invoke-WebRequest -Uri "http://127.0.0.1:8001/delete" `
  -Method Post `
  -Headers @{ "Content-Type" = "application/json" } `
  -Body '{"key": "song1"}'

# Get network overlay information.
(Invoke-WebRequest -Uri "http://127.0.0.1:8001/overlay" -Method GET).Content

# Depart from the network.
Invoke-WebRequest -Uri http://localhost:8001/depart -Method POST

# (Windows PowerShell) Query a song and pretty-print the JSON response.
Invoke-WebRequest -Uri "http://127.0.0.1:8001/query?key=song1" -Method Get
$response = Invoke-WebRequest -Uri "http://127.0.0.1:8001/query?key=song1"
$response.Content | ConvertFrom-Json | ConvertTo-Json -Depth 10

#############################################
# Experiment 1: Insert 
cd chordify/scripts
python3 insert_experiment.py --num_nodes 5 --local

# Experiment 2: Query 
cd chordify/scripts
python3 query_experiment.py --num_nodes 5 --local

# Experiment 3: Requests
cd chordify/scripts
python3 request_experiment --num_nodes 5 --local


#############################################
Join and Depart test cases 

curl -X POST http://127.0.0.1:8001/insert -H "Content-Type: application/json" -d '{"key": "song3", "value": "first"}'
curl -X POST http://127.0.0.1:8001/insert -H "Content-Type: application/json" -d '{"key": "song1", "value": "second"}'
curl -X POST http://127.0.0.1:8001/insert -H "Content-Type: application/json" -d '{"key": "joe", "value": "third"}'

curl -X GET "http://127.0.0.1:8001/nodeinfo"
curl -X GET "http://127.0.0.1:8004/nodeinfo"
curl -X GET "http://127.0.0.1:8002/nodeinfo"
curl -X GET "http://127.0.0.1:8003/nodeinfo"

// node 6
sudo docker run -d \
    --network chordify_default \
    --name node6 \
    -v $(pwd):/app \
    -e IP=node6 \
    -e PORT=8006 \
    -p 8006:8006 \
    chordify \
    python app.py --ip node6 --port 8006 --bootstrap_ip bootstrap --bootstrap_port 8000

curl -X GET "http://127.0.0.1:8001/nodeinfo"
curl -X GET "http://127.0.0.1:8006/nodeinfo"
curl -X GET "http://127.0.0.1:8004/nodeinfo"
curl -X GET "http://127.0.0.1:8002/nodeinfo"
curl -X GET "http://127.0.0.1:8003/nodeinfo"

curl -X POST "http://127.0.0.1:8006/depart"

curl -X GET "http://127.0.0.1:8001/nodeinfo"
curl -X GET "http://127.0.0.1:8004/nodeinfo"
curl -X GET "http://127.0.0.1:8002/nodeinfo"
curl -X GET "http://127.0.0.1:8003/nodeinfo"